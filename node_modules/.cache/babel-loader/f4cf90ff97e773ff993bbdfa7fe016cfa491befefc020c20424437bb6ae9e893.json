{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// // import { faSearch } from '@fortawesome/free-solid-svg-icons';\n// import LoadingSpinner from './Loading'; // Import the loading spinner component\n// import { faSearch, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\n// const Search = () => {\n//     const [URL, setSearchQuery] = useState('');\n//     const [Result, setSearchResult] = useState('');\n//     const [SelectedOption, setSelectedOption] = useState('forums');\n//     const [isLoading, setIsLoading] = useState(false); // Add loading state\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log(\"Searching\", SelectedOption, \"for:\", URL);\n\n//         const domain = URL.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n\n//         let apiUrl;\n//         if (SelectedOption === 'forums') {\n//             apiUrl = 'http://localhost:5001/forumscheck';\n//         } else {\n//             apiUrl = 'http://localhost:5001/reviewscheck';\n//         }\n\n//         // Set loading to true before making the API call\n//         setIsLoading(true);\n\n//         axios.post(apiUrl, {\n//             Query: domain\n//         }).then((response) => {\n//             console.log(\"API Response:\", response.data);\n//             setSearchResult(response.data);\n//         }).catch((error) => {\n//             console.error(\"There was an error with the request!\", error);\n//         }).finally(() => {\n//             // Set loading to false after API call is completed\n//             setIsLoading(false);\n//         });\n//     };\n\n//     const handleClear = () => {\n//         setSearchQuery('');\n//         setSearchResult('');\n//         window.location.reload(); // Refresh the page\n//     };\n\n//     return (\n//         <div>\n//             <form className={styles.searchContainer} onSubmit={handleSubmit}>\n//                 <h2>Search source or article</h2>\n//                 <div className={styles.inputGroup}>\n//                     <select\n//                         className={styles.selectField}\n//                         value={SelectedOption}\n//                         onChange={(e) => setSelectedOption(e.target.value)}\n//                     >\n//                         <option value=\"forums\">Forums</option>\n//                         <option value=\"reviews\">Reviews</option>\n//                     </select>\n//                     <div className={styles.inputWrapper}>\n//                         <FontAwesomeIcon icon={faSearch} className={styles.searchIcon} />\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"Enter the source or article URL ....\"\n//                             value={URL}\n//                             onChange={(e) => setSearchQuery(e.target.value)}\n//                             className={styles.inputField}\n//                             required\n//                         />\n//                         {URL && (\n//                             <button type=\"button\" onClick={handleClear} className={styles.clearButton}>\n//                                 <FontAwesomeIcon icon={faTimesCircle} />\n//                             </button>\n//                         )}\n//                     </div>\n//                 </div>\n//                 <button type=\"submit\" className={styles.submitButton}>Search</button>\n\n//                 {/* Conditional rendering for loading spinner */}\n//                 {isLoading && <LoadingSpinner />}\n\n//                 {/* Conditional rendering for search result */}\n//                 {Result && !isLoading && (\n//                     <div className={styles.resultContainer}>\n//                         <h3>Search Result:</h3>\n//                         <pre>{JSON.stringify(Result, null, 2)}</pre>\n\n//                     </div>\n//                 )}\n//                 {/* {Result.length > 0 ? (\n//                     <div className={styles.resultContainer}>\n//                         <h3>Results found</h3><hr></hr>\n//                         {Result.map((doc, index) => (\n//                             <div key={index} className=\"document\">\n//                                 <a href={doc.originalUrl} target=\"_blank\" rel=\"noopener noreferrer\"><h3>{doc.body || 'N/A'}</h3></a>\n//                                 <p>Published Date: {new Date(doc.date).toLocaleString()}</p>\n//                                 <p>Source: {doc.source}</p>\n//                                 <p>Source URL: <a href={doc.sourceUrl} target=\"_blank\" rel=\"noopener noreferrer\">{doc.sourceUrl}</a></p>\n//                                 <br/><hr></hr>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 ) : (\n//                     <div>\n//                         <h3>Result not found</h3>\n//                     </div>\n//                 )} */}\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default Search;","map":{"version":3,"names":[],"sources":["/Users/dishanth/Documents/GitHub/FnR-FE/src/Pages/Search/Search.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// // import { faSearch } from '@fortawesome/free-solid-svg-icons';\n// import LoadingSpinner from './Loading'; // Import the loading spinner component\n// import { faSearch, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\n// const Search = () => {\n//     const [URL, setSearchQuery] = useState('');\n//     const [Result, setSearchResult] = useState('');\n//     const [SelectedOption, setSelectedOption] = useState('forums');\n//     const [isLoading, setIsLoading] = useState(false); // Add loading state\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n//         console.log(\"Searching\", SelectedOption, \"for:\", URL);\n\n//         const domain = URL.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n\n//         let apiUrl;\n//         if (SelectedOption === 'forums') {\n//             apiUrl = 'http://localhost:5001/forumscheck';\n//         } else {\n//             apiUrl = 'http://localhost:5001/reviewscheck';\n//         }\n\n//         // Set loading to true before making the API call\n//         setIsLoading(true);\n\n//         axios.post(apiUrl, {\n//             Query: domain\n//         }).then((response) => {\n//             console.log(\"API Response:\", response.data);\n//             setSearchResult(response.data);\n//         }).catch((error) => {\n//             console.error(\"There was an error with the request!\", error);\n//         }).finally(() => {\n//             // Set loading to false after API call is completed\n//             setIsLoading(false);\n//         });\n//     };\n\n//     const handleClear = () => {\n//         setSearchQuery('');\n//         setSearchResult('');\n//         window.location.reload(); // Refresh the page\n//     };\n\n//     return (\n//         <div>\n//             <form className={styles.searchContainer} onSubmit={handleSubmit}>\n//                 <h2>Search source or article</h2>\n//                 <div className={styles.inputGroup}>\n//                     <select\n//                         className={styles.selectField}\n//                         value={SelectedOption}\n//                         onChange={(e) => setSelectedOption(e.target.value)}\n//                     >\n//                         <option value=\"forums\">Forums</option>\n//                         <option value=\"reviews\">Reviews</option>\n//                     </select>\n//                     <div className={styles.inputWrapper}>\n//                         <FontAwesomeIcon icon={faSearch} className={styles.searchIcon} />\n//                         <input\n//                             type=\"text\"\n//                             placeholder=\"Enter the source or article URL ....\"\n//                             value={URL}\n//                             onChange={(e) => setSearchQuery(e.target.value)}\n//                             className={styles.inputField}\n//                             required\n//                         />\n//                         {URL && (\n//                             <button type=\"button\" onClick={handleClear} className={styles.clearButton}>\n//                                 <FontAwesomeIcon icon={faTimesCircle} />\n//                             </button>\n//                         )}\n//                     </div>\n//                 </div>\n//                 <button type=\"submit\" className={styles.submitButton}>Search</button>\n\n//                 {/* Conditional rendering for loading spinner */}\n//                 {isLoading && <LoadingSpinner />}\n\n//                 {/* Conditional rendering for search result */}\n//                 {Result && !isLoading && (\n//                     <div className={styles.resultContainer}>\n//                         <h3>Search Result:</h3>\n//                         <pre>{JSON.stringify(Result, null, 2)}</pre>\n                        \n//                     </div>\n//                 )}\n//                 {/* {Result.length > 0 ? (\n//                     <div className={styles.resultContainer}>\n//                         <h3>Results found</h3><hr></hr>\n//                         {Result.map((doc, index) => (\n//                             <div key={index} className=\"document\">\n//                                 <a href={doc.originalUrl} target=\"_blank\" rel=\"noopener noreferrer\"><h3>{doc.body || 'N/A'}</h3></a>\n//                                 <p>Published Date: {new Date(doc.date).toLocaleString()}</p>\n//                                 <p>Source: {doc.source}</p>\n//                                 <p>Source URL: <a href={doc.sourceUrl} target=\"_blank\" rel=\"noopener noreferrer\">{doc.sourceUrl}</a></p>\n//                                 <br/><hr></hr>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 ) : (\n//                     <div>\n//                         <h3>Result not found</h3>\n//                     </div>\n//                 )} */}\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default Search;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}